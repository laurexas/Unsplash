{"version":3,"sources":["components/UI/Input/index.module.scss","components/UI/Queries/index.module.scss","components/UI/Button/index.module.scss","components/Grid/index.module.scss","components/UI/GridList/index.module.scss","components/UI/GridItem/index.module.scss","components/UI/Loader/index.module.scss","components/SearchBar/index.module.scss","components/UI/Error/index.module.scss","store/searchbar/types.ts","components/UI/Icon/Icon.tsx","store/searchbar/searchbar.reducer.ts","store/utils.ts","store/searchbar/searchbar.actions.ts","components/UI/Input/Input.tsx","components/UI/Button/Button.tsx","components/SearchBar/Searchbar.tsx","components/UI/GridItem/GridItem.tsx","components/UI/Loader/Loader.tsx","components/UI/GridList/GridList.tsx","components/UI/Queries/Queries.tsx","components/Grid/Grid.tsx","store/notifications/errors/errorsMessage.actions.ts","store/notifications/errors/errorMessage.reducer.ts","components/UI/Error/Error.tsx","App.tsx","serviceWorker.ts","store/index.tsx","index.tsx"],"names":["module","exports","Types","Icon","props","id","viewBox","className","d","initialState","search","loading","error","data","keywords","getSearchbarReducer","state","parseError","dispatch","hasOwnProperty","JSON","stringify","response","console","log","type","SHOW_UNEXPECTED_ERROR","SEARCHBAR_FORM_LOADING","onFormSubmit","e","value","a","preventDefault","errors","length","Object","keys","axios","get","headers","Authorization","results","SEARCHBAR_FORM_SUBMIT_SUCCESS","Input","useSelector","useDispatch","style","searchIcon","name","placeholder","onChange","SEARCHBAR_ON_INPUT_CHANGE","target","onInputChange","Button","onClick","btn","join","children","Searchbar","searchBar","searchForm","onSubmit","searchBtn","saveContainer","saveBtn","keyword","SEARCHBAR_SAVED_NEW_KEYWORD","Item","images","map","item","idx","key","src","urls","small","alt","description","imgContainer","Loader","lds_ripple","List","list","Queries","queriesContainer","heading","Body","main","hideUnexpectedError","HIDE_UNEXPECTED_ERROR","getErrors","ErrorModal","Fragment","backdrop","modal","desc","button","App","Error","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","SEARCHBAR_FORM_ERROR","array","push","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.76906dbf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"Input_search__1yKtQ\",\"searchIcon\":\"Input_searchIcon__1bfgx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"queriesContainer\":\"Queries_queriesContainer__1LEYB\",\"heading\":\"Queries_heading__1aYge\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__Gel5O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Grid_main__1Xa3X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"GridList_list__1NUhj\",\"item\":\"GridList_item__3oLXO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgContainer\":\"GridItem_imgContainer__2gGMT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds_ripple\":\"Loader_lds_ripple__1Rfgp\",\"lds-ripple\":\"Loader_lds-ripple__1O95w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBar\":\"SearchBar_searchBar__3Sn1e\",\"searchForm\":\"SearchBar_searchForm__23qaY\",\"searchBtn\":\"SearchBar_searchBtn__3CKYq\",\"saveContainer\":\"SearchBar_saveContainer__2Uk-O\",\"saveBtn\":\"SearchBar_saveBtn__EiVq5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Error_backdrop__10aXI\",\"modal\":\"Error_modal__Yfu9H\",\"heading\":\"Error_heading__1neiU\",\"desc\":\"Error_desc__1PKq5\",\"button\":\"Error_button__Htw6w\"};","export enum Types {\r\n    SEARCHBAR_SAVED_NEW_KEYWORD = 'SEARCHBAR_SAVED_NEW_KEYWORD',\r\n    SEARCHBAR_ON_INPUT_CHANGE = 'SEARCHBAR_ON_INPUT_CHANGE',\r\n    SEARCHBAR_FORM_LOADING = 'SEARCHBAR_FORM_LOADING',\r\n    SEARCHBAR_FORM_ERROR = 'SEARCHBAR_FORM_ERROR',\r\n    SEARCHBAR_FORM_SUBMIT_SUCCESS = 'SEARCHBAR_FORM_SUBMIT_SUCCESS',\r\n    SHOW_UNEXPECTED_ERROR = 'SHOW_UNEXPECTED_ERROR',\r\n    HIDE_UNEXPECTED_ERROR = 'HIDE_UNEXPECTED_ERROR'\r\n}\r\n\r\n\r\nexport interface SearchBarOnInputChangeAction {\r\n    type: Types.SEARCHBAR_ON_INPUT_CHANGE,\r\n    name: string,\r\n    value: string\r\n}\r\n\r\nexport interface SearchbarSavedKeyword {\r\n    type: Types.SEARCHBAR_SAVED_NEW_KEYWORD,\r\n    keyword: string\r\n}\r\n\r\nexport interface SearchBarFormLoadingAction {\r\n    type: Types.SEARCHBAR_FORM_LOADING,\r\n\r\n}\r\n\r\nexport interface SearchBarFormSubmitAction {\r\n    type: Types.SEARCHBAR_FORM_SUBMIT_SUCCESS,\r\n    data: Data\r\n}\r\n\r\nexport interface SearchBarFormErrorsAction {\r\n    type: Types.SEARCHBAR_FORM_ERROR,\r\n    error: { [key: string]: string }\r\n}\r\n\r\n\r\nexport type SearchBarAction =\r\n    SearchBarOnInputChangeAction\r\n   | SearchBarFormLoadingAction\r\n   | SearchBarFormErrorsAction\r\n   | SearchBarFormSubmitAction\r\n   | SearchbarSavedKeyword\r\n \r\n\r\n\r\n   export interface Data {\r\n    total:       number;\r\n    total_pages: number;\r\n    results:     Result[];\r\n}\r\n\r\nexport interface Result {\r\n    id:                       string;\r\n    created_at:               Date;\r\n    width:                    number;\r\n    height:                   number;\r\n    color:                    string;\r\n    likes:                    number;\r\n    liked_by_user:            boolean;\r\n    description:              string;\r\n    user:                     User;\r\n    current_user_collections: any[];\r\n    urls:                     Urls;\r\n    links:                    ResultLinks;\r\n}\r\n\r\nexport interface ResultLinks {\r\n    self:     string;\r\n    html:     string;\r\n    download: string;\r\n}\r\n\r\nexport interface Urls {\r\n    raw:     string;\r\n    full:    string;\r\n    regular: string;\r\n    small:   string;\r\n    thumb:   string;\r\n}\r\n\r\nexport interface User {\r\n    id:                 string;\r\n    username:           string;\r\n    name:               string;\r\n    first_name:         string;\r\n    last_name:          string;\r\n    instagram_username: string;\r\n    twitter_username:   string;\r\n    portfolio_url:      string;\r\n    profile_image:      ProfileImage;\r\n    links:              UserLinks;\r\n}\r\n\r\nexport interface UserLinks {\r\n    self:   string;\r\n    html:   string;\r\n    photos: string;\r\n    likes:  string;\r\n}\r\n\r\nexport interface ProfileImage {\r\n    small:  string;\r\n    medium: string;\r\n    large:  string;\r\n}\r\n\r\n\r\nexport interface UserLinks {\r\n    self:      string;\r\n    html:      string;\r\n    photos:    string;\r\n    likes:     string;\r\n    portfolio: string;\r\n}\r\n\r\nexport interface ProfileImage {\r\n    small:  string;\r\n    medium: string;\r\n    large:  string;\r\n}","import React, { FC } from 'react';\r\n\r\n\r\n\r\ninterface ClassName {\r\n    className?: string,\r\n    onClick?: () => void,\r\n    style?: {\r\n        fill: string\r\n    }\r\n}\r\nexport const Icon : FC<ClassName> = (props:ClassName) : JSX.Element => {\r\n    return (\r\n        <svg id=\"search\" viewBox=\"0 0 511.999 511.999\" className={props.className}>\r\n            <path d=\"M508.874,478.708L360.142,329.976c28.21-34.827,45.191-79.103,45.191-127.309c0-111.75-90.917-202.667-202.667-202.667\r\n                S0,90.917,0,202.667s90.917,202.667,202.667,202.667c48.206,0,92.482-16.982,127.309-45.191l148.732,148.732\r\n                c4.167,4.165,10.919,4.165,15.086,0l15.081-15.082C513.04,489.627,513.04,482.873,508.874,478.708z M202.667,362.667\r\n                c-88.229,0-160-71.771-160-160s71.771-160,160-160s160,71.771,160,160S290.896,362.667,202.667,362.667z\"/>\r\n        </svg>\r\n    )\r\n}\r\n\r\n\r\n","import { Data, Types, SearchBarAction } from './types';\r\n\r\n\r\n\r\n\r\nexport interface SearchBarReducer {\r\n    search: string,\r\n    loading: boolean,\r\n    error: {[key:string]: any},\r\n    data: Data | null, \r\n    keywords: string[]\r\n}\r\n\r\nconst initialState : SearchBarReducer = {\r\n    search: '',\r\n    loading: false,\r\n    error: {},\r\n    data: null,\r\n    keywords: []\r\n}\r\n\r\nexport default (state=initialState, action:SearchBarAction) => {\r\n    switch (action.type) {\r\n        case Types.SEARCHBAR_FORM_LOADING: {\r\n            return {...state, loading: !state.loading}\r\n        }\r\n        case Types.SEARCHBAR_ON_INPUT_CHANGE: {\r\n            return {...state, [action.name]: action.value}\r\n        }\r\n        case Types.SEARCHBAR_FORM_ERROR: {\r\n            return {...state, error: action.error, loading:false}\r\n        }\r\n        case Types.SEARCHBAR_FORM_SUBMIT_SUCCESS: {\r\n            return {...state, data: action.data, loading:false}\r\n        }\r\n        case Types.SEARCHBAR_SAVED_NEW_KEYWORD: {\r\n            let array : string[] = state.keywords;\r\n            array.push(action.keyword)\r\n            return {...state, keywords: array}\r\n        }\r\n        default :\r\n          return state\r\n    }\r\n}\r\n\r\n\r\nexport const getSearchbarReducer = (state: RootState) => state.search;","import {Types} from '../store/searchbar/types';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport const parseError = (error: any, dispatch:Dispatch) => {\r\n    let data;\r\n      \r\n    if (typeof error === 'object' && error.hasOwnProperty('response')) {\r\n        data = JSON.stringify(error.response.data)\r\n        console.log(data)\r\n    } else if (typeof error === 'object') {\r\n        console.log(error);\r\n        data = JSON.stringify(error)\r\n    } else {\r\n        console.log(error);\r\n        data = error\r\n    }\r\n    dispatch({\r\n        type: Types.SHOW_UNEXPECTED_ERROR,\r\n        data\r\n    })\r\n    dispatch({\r\n        type:Types.SEARCHBAR_FORM_LOADING\r\n    })\r\n}","import axios, {AxiosResponse} from 'axios';\r\nimport {Dispatch} from 'redux';\r\nimport { SearchBarAction, Types, Data } from './types';\r\nimport { parseError } from '../utils';\r\n\r\n\r\n\r\nexport const onInputChange = (e: React.ChangeEvent<HTMLInputElement>): SearchBarAction => {\r\n    return {\r\n       type: Types.SEARCHBAR_ON_INPUT_CHANGE,\r\n       name: e.target.name,\r\n       value: e.target.value\r\n    }\r\n};\r\n\r\nexport const onFormSubmit = (e: React.SyntheticEvent, value: string): AsyncAction | SearchBarAction => {\r\n    const acces_key = 'BpslQNxqHYJPSxnqRpQ3h8oK56dxVnGqZZ6z7nvzx2Y';\r\n    const URL = 'https://api.unsplash.com/search/photos';\r\n    return async (dispatch: Dispatch) => {\r\n        e.preventDefault();\r\n        \r\n        dispatch({ type: Types.SEARCHBAR_FORM_LOADING })\r\n        const errors: {[key:string]:any} = {};\r\n        if(value.length < 1) errors.search = 'Search field is empty, please enter value...';\r\n        if(Object.keys(errors).length) {\r\n            return parseError(errors, dispatch);\r\n        }\r\n        try {\r\n            const { data } : AxiosResponse<Data> = await axios.get(`${URL}?per_page=100&query=${value}`, { headers:{ \r\n                Authorization: `Client-ID ${acces_key}`\r\n            }});\r\n\r\n            if(data.results.length < 1) {\r\n                errors.results = 'No results found';\r\n                parseError(errors, dispatch);\r\n            }\r\n            dispatch({ type: Types.SEARCHBAR_FORM_SUBMIT_SUCCESS, data })\r\n        }\r\n        catch(error) {\r\n        \r\n        parseError(error, dispatch);\r\n          \r\n        }\r\n    }\r\n}\r\n\r\nexport const saveKeyword = (keyword: string): SearchBarAction => {\r\n    return {\r\n        type: Types.SEARCHBAR_SAVED_NEW_KEYWORD,\r\n        keyword\r\n    }\r\n}\r\n ","import React from 'react';\r\nimport style from './index.module.scss';\r\nimport { Icon } from '../Icon/Icon';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getSearchbarReducer } from '../../../store/searchbar/searchbar.reducer';\r\nimport { onInputChange } from '../../../store/searchbar/searchbar.actions';\r\n\r\nconst Input:React.FC = ():JSX.Element => {\r\n    const { search } = useSelector(getSearchbarReducer);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n     return (\r\n        <div className={style.search}>\r\n            <Icon className={style.searchIcon}/>\r\n            <input type=\"text\" name=\"search\" placeholder=\"Search images...\" value={search} onChange={(e: React.ChangeEvent<HTMLInputElement>) => dispatch(onInputChange(e))}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","import React, { ReactText } from 'react';\r\nimport style from './index.module.scss';\r\n\r\n\r\ninterface ButtonProps {\r\n    className?: string,\r\n    children: ReactText,\r\n    onClick?: () => void\r\n}\r\n\r\nconst Button:React.FC<ButtonProps> = (props:ButtonProps):JSX.Element => {\r\n   return (\r\n        <button onClick={props.onClick} className={[props.className, style.btn].join(' ')}>{props.children}</button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport style from './index.module.scss';\r\nimport Input from '../UI/Input/Input';\r\nimport Button from '../UI/Button/Button';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {getSearchbarReducer } from '../../store/searchbar/searchbar.reducer';\r\nimport { onFormSubmit, saveKeyword } from '../../store/searchbar/searchbar.actions';\r\n\r\n\r\nconst Searchbar = ():JSX.Element => {\r\n    const { search } = useSelector(getSearchbarReducer)\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (e: React.ChangeEvent<HTMLFormElement>) => {\r\n        dispatch(onFormSubmit(e, search))\r\n    };\r\n    \r\n    return (\r\n        <div className={style.searchBar}>\r\n            <form className={style.searchForm} onSubmit={(e: React.ChangeEvent<HTMLFormElement>) => onSubmit(e)}>\r\n                <Input />\r\n                <Button className={style.searchBtn}>Search</Button>\r\n            </form>\r\n            <div className={style.saveContainer}>\r\n                <Button className={style.saveBtn} onClick={() => dispatch(saveKeyword(search))}>Save</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbar;","import React from 'react';\r\nimport style from './index.module.scss';\r\nimport {getSearchbarReducer } from '../../../store/searchbar/searchbar.reducer';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nconst Item = () => {\r\n    const { data } = useSelector(getSearchbarReducer);\r\n    \r\n    const images = data?.results.map((item,idx) => {\r\n        return <img key={idx} src={`${item.urls.small}`} alt={`${item.description}`} />\r\n    })\r\n\r\n    \r\n    return <div className={style.imgContainer}>{images}</div>\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport style from './index.module.scss';\r\n\r\n\r\ninterface LoadingProps {\r\n  loading: boolean,\r\n  className?:string\r\n}\r\nconst Loader = (props:LoadingProps) => {\r\n  if(props.loading){\r\n    return (\r\n      <div className={[style.lds_ripple, props.className].join(' ')}>\r\n        <div/>\r\n        <div/>\r\n      </div>\r\n    )\r\n  }else{\r\n    return null\r\n  }\r\n};\r\n\r\n\r\nexport default Loader;","import React from 'react';\r\nimport style from './index.module.scss';\r\nimport Item from '../GridItem/GridItem';\r\nimport Loader from '../Loader/Loader';\r\nimport { getSearchbarReducer } from '../../../store/searchbar/searchbar.reducer';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nconst List = () => {\r\n    const { loading } = useSelector(getSearchbarReducer);\r\n\r\n    if(loading) return <Loader loading={true}/>\r\n    \r\n    return (\r\n        <div className={style.list}>\r\n            <Item />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List;","import React from 'react';\r\nimport style from './index.module.scss';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getSearchbarReducer } from '../../../store/searchbar/searchbar.reducer';\r\nimport { onFormSubmit } from '../../../store/searchbar/searchbar.actions';\r\n\r\n\r\n\r\nconst Queries = () => {\r\n\r\n    const { keywords } = useSelector(getSearchbarReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    const renderKeywords = () => {\r\n        return keywords?.map(item => <p key={item} onClick={(e) => dispatch(onFormSubmit(e, item))}>{item}</p>);\r\n    }\r\n\r\n    return (\r\n        <div className={style.queriesContainer}>\r\n            <h1 className={style.heading}>Saved keywords:</h1>\r\n            {renderKeywords()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Queries;","import React from 'react';\r\nimport style from './index.module.scss';\r\nimport List from '../UI/GridList/GridList';\r\nimport Queries from '../UI/Queries/Queries';\r\n\r\n\r\nconst Body = () => {\r\n    return (\r\n        <div className={style.main}>\r\n            <List/>\r\n            <Queries/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Body;","import { ErrorAction } from './types';\nimport { Types } from '../../searchbar/types';\n\nexport const showUnexpectedError = (data: {[key:string]:any}) : ErrorAction => {\n  return {\n    type: Types.SHOW_UNEXPECTED_ERROR,\n    data\n  }\n};\n\nexport const hideUnexpectedError = () : ErrorAction => {\n  return {\n    type: Types.HIDE_UNEXPECTED_ERROR\n  }\n};","import {Types} from '../../searchbar/types';\n\nexport type ErrorMessage = string | null\n\nexport const errorMessageReducer = (state:ErrorMessage=null,action:any):ErrorMessage=>{\n  switch (action.type){\n    case Types.SHOW_UNEXPECTED_ERROR : return action.data;\n    case Types.HIDE_UNEXPECTED_ERROR : return null;\n    default : return state\n  }\n};\n\nexport const getErrors = (state: RootState) => state;","import React from 'react';\r\nimport style from './index.module.scss';\r\nimport Button from \"../Button/Button\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { hideUnexpectedError } from '../../../store/notifications/errors/errorsMessage.actions';\r\nimport { getErrors } from '../../../store/notifications/errors/errorMessage.reducer';\r\n\r\n\r\nconst ErrorModal = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const {error} = useSelector(getErrors);\r\n\r\n  if(!error) return null;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={style.backdrop} onClick={() => dispatch(hideUnexpectedError())}/>\r\n      <div className={style.modal}>\r\n        <h1 className={style.heading}>Unexpected error</h1>\r\n        <p className={style.desc}>{error}</p>\r\n        <Button className={style.button} onClick={() => dispatch(hideUnexpectedError())}>\r\n          Close\r\n        </Button>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default ErrorModal;\r\n","import React from 'react';\nimport Searchbar from './components/SearchBar/Searchbar';\nimport Body from './components/Grid/Grid';\nimport Error from './components/UI/Error/Error';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <Searchbar/>\n      </header>\n      <Body/>\n      <Error/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore, compose, applyMiddleware, Action} from 'redux';\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport SearchReducer, { SearchBarReducer } from './searchbar/searchbar.reducer';\r\nimport {ErrorMessage, errorMessageReducer} from './notifications/errors/errorMessage.reducer';\r\n\r\n\r\ndeclare global {\r\n   interface Window {\r\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose,\r\n   }\r\n}\r\n\r\ndeclare global {\r\n   interface RootState {\r\n        search: SearchBarReducer,\r\n        error: ErrorMessage\r\n   }\r\n   type AsyncAction<ReturnType = void> = ThunkAction<ReturnType,\r\n      RootState,\r\n      null,\r\n      Action<string>>\r\n}\r\n\r\n// Create reducer combined of all other. This is the global app state\r\nconst rootReducer = combineReducers<RootState>({\r\n   search:SearchReducer,\r\n   error: errorMessageReducer\r\n});\r\n// Enable redux dev tools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n// Export store (state) so we can use it in <Provider> or store.dispatch(action)\r\nexport default createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}